#!/usr/bin/env python2.7

import os
import re
import subprocess
import sys

VERBOSE = 0

BASE_PREFIX = '__block_base__'
TIP_PREFIX = '__block_tip__'
VERSION = '0.2'
VERSION_STR = 'git-block v' + VERSION

####

def run_git(*args):
    args = ['git'] + list(args)

    if VERBOSE >= 1:
        print >>sys.stderr, '    <' + ' '.join(args) + '>'

    try:
        ret = subprocess.check_output(args, stderr=subprocess.STDOUT).splitlines()
        if VERBOSE >= 2:
            for x in ret:
                print >>sys.stderr, '        >' + x
        return ret
    except subprocess.CalledProcessError as e:
        if VERBOSE >= 1:
            for x in e.output.splitlines():
                print >>sys.stderr, '        !' + x
        raise


def check_error_git(*args):
    # Different from run_git: Must allow stdout inheretance.
    args = ['git'] + list(args)

    if VERBOSE >= 1:
        print >>sys.stderr, '    <<' + ' '.join(args) + '>>'

    p = subprocess.Popen(args, stdout=None, stderr=subprocess.PIPE)
    (stdoutdata, stderrdata) = p.communicate()
    if p.returncode == 0:
        return

    if VERBOSE >= 1:
        for x in stderrdata.splitlines():
            print >>sys.stderr, '        !!' + x

    raise subprocess.CalledProcessError(cmd=args, returncode=p.returncode,
                                        output=stderrdata)

####

def get_pager():
    return 'less' # TODO: Ask git.

####

class GitRollback():
    def __init__(self, cmd_name):
        self.cmd_name = cmd_name
        self.rollback_list = []
        return


    def add(self, *git_args):
        self.rollback_list.append(git_args)
        return


    def rollback(self, ex_val):
        if not self.rollback_list:
            return # Nothing to roll back.

        print >>sys.stderr, 'Attempting rollback...'

        try:
            for x in reversed(self.rollback_list):
                run_git(*x)
                continue
            return True
        except subprocess.CalledProcessError as e:
            print >>sys.stderr, 'ERROR: Rollback failed:'
            print >>sys.stderr, e.output
            exit(-1) # The world is broken.
        return


    def __enter__(self):
        return self


    def __exit__(self, ex_type, ex_val, ex_traceback):
        if ex_type != subprocess.CalledProcessError:
            return # Pass it on.

        print >>sys.stderr, 'ERROR: `{}` failed:'.format(self.cmd_name)
        self.rollback(ex_val)
        exit(1)

####

def main(args):
    global VERBOSE
    if args:
        if args[0] == '-v':
            VERBOSE = 1
            args.pop(0)
        elif args[0] == '-vv':
            VERBOSE = 2
            args.pop(0)

    ####

    cur_branch = run_git('rev-parse', '--abbrev-ref', 'HEAD')[0].strip()

    cur_block = None
    if cur_branch.startswith(TIP_PREFIX):
        cur_block = cur_branch[len(TIP_PREFIX):]

    ####

    branches = [x[2:] for x in run_git('branch')]
    branches = set(branches)

    bases = set()
    tips = set()
    for x in branches:
        if x.startswith(BASE_PREFIX):
            bases.add(x[len(BASE_PREFIX):])
            continue

        if x.startswith(TIP_PREFIX):
            tips.add(x[len(TIP_PREFIX):])
            continue
        continue

    blocks = bases.intersection(tips)

    ####

    if not args:
        for x in sorted(blocks):
            prefix = '  '
            if x == cur_block:
                prefix = '* '
            print prefix + x
            continue
        return 0

    cmd = args.pop(0)
    if cmd == '--version':
        print VERSION_STR
        return 0


    if cmd == '--help':
        print VERSION_STR
        print 'Commands:'
        print '  --version'
        print '  <> | Lists blocks'
        print '  new <name>'
        print '  delete <name>'
        print '  <name> | Checks out a block'
        return 0

    ####

    if cmd == 'clean':
        def delete_orphans(type_name, type_set, type_prefix):
            for x in type_set:
                if x in blocks:
                    continue

                branch_name = type_prefix + x
                try:
                    run_git('branch', '-D', branch_name)
                    print >>sys.stderr, 'Deleted orphaned {} \'{}\''.format(type_name, branch_name)
                except subprocess.CalledProcessError:
                    print >>sys.stderr, 'Failed to delete orphaned {} \'{}\''.format(type_name, branch_name)
                    pass
                continue
            return

        delete_orphans('base', bases, BASE_PREFIX)
        delete_orphans('tip', tips, TIP_PREFIX)
        return 0

    ####

    if cmd == 'new':
        switch_to_tip = False

        name = None
        start_point = 'HEAD'
        while args:
            x = args.pop(0)
            if x == '-b':
                switch_to_tip = True
                continue

            if not name:
                name = x
                continue

            start_point = x
            break
        else:
            if not name:
                print >>sys.stderr, 'ERROR: Not enough args'
                return 1

        if name == 'HEAD':
            print >>sys.stderr, 'ERROR: Block name \'{}\' is reserved'.format(name)
            return 1

        if name in blocks:
            print >>sys.stderr, 'ERROR: Block \'{}\' already exists'.format(name)
            return 1

        if start_point in blocks:
            start_point = TIP_PREFIX + start_point

        base_name = BASE_PREFIX + name
        tip_name = TIP_PREFIX + name

        with GitRollback(cmd) as r:
            run_git('branch', base_name, start_point)
            r.add('branch', '-D', base_name)

            if switch_to_tip:
                run_git('checkout', '-b', tip_name)
            else:
                run_git('branch', tip_name)
        return 0

    ####

    if cmd == 'delete':
        while args:
            x = args.pop(0)
            name = x
            break
        else:
            print >>sys.stderr, 'ERROR: Not enough args'
            return 1

        if not name in blocks:
            print >>sys.stderr, 'ERROR: Block \'{}\' does not exist'.format(name)
            return 1

        if name == cur_block:
            print >>sys.stderr, 'ERROR: Block \'{}\' is active'.format(name)
            return 1

        with GitRollback(cmd):
            if name in bases:
                run_git('branch', '-D', BASE_PREFIX + name)
            if name in tips:
                run_git('branch', '-D', TIP_PREFIX + name)
        print 'Deleted block \'{}\''.format(name)
        return 0

    ####

    if cmd == 'show' or cmd == 'log':
        is_log = (cmd == 'log')
        target = cur_block
        while args:
            x = args.pop(0)
            target = x
            break

        if not target:
            print >>sys.stderr, 'ERROR: No block is active'
            return 1

        if target not in blocks:
            print >>sys.stderr, 'ERROR: Unknown block \'{}\''.format(target)
            return 1

        try:
            range_arg = '{}..{}'.format(BASE_PREFIX+target, TIP_PREFIX+target)
            show_lines = run_git('log', range_arg)
            show_lines.append('=' * 47)
            show_lines.append('')

            show_data = '\n'.join(show_lines)

            pager = get_pager()
            p_pager = subprocess.Popen(pager, stdin=subprocess.PIPE)
            p_pager.stdin.write(show_data)
            assert p_pager.returncode == None

            log_args = ['git', '--no-pager', 'log', BASE_PREFIX+target]
            p_log = subprocess.Popen(log_args, stdout=p_pager.stdin)
            p_log.communicate()
            assert p_log.returncode != None

            p_pager.wait()
            assert p_pager.returncode != None
        except subprocess.CalledProcessError as e:
            print >>sys.stderr, 'ERROR: {} failed: {}'.format(cmd, e)
            return 1
        return 0

    ####

    if cmd == 'rebase':
        return rebase(blocks, cur_block, args)

    ####

    if cmd not in blocks:
        print >>sys.stderr, 'ERROR: Unknown block or command \'{}\''.format(cmd)
        return 1
    name = cmd

    if name == cur_block:
        print >>sys.stderr, 'Already on block \'{}\''.format(name)
        return 1

    tip_name = TIP_PREFIX + name
    with GitRollback('checkout') as r:
        run_git('checkout', tip_name)
        print 'Switched to block \'{}\''.format(name)

    return 0

####

REBASE_APPLY = os.path.join('.git', 'rebase-apply')
REBASE_MERGE = os.path.join('.git', 'rebase-merge')

def rebase(blocks, cur_block, args):
    if os.path.exists(REBASE_APPLY):
        return in_rebase(blocks, args, REBASE_APPLY)

    if os.path.exists(REBASE_MERGE):
        return in_rebase(blocks, args, REBASE_MERGE)

    ####

    interactive = ''
    while args:
        x = args.pop(0)
        if x == '-i':
            interactive = x
            continue
        onto = x
        break
    else:
        print >>sys.stderr, 'ERROR: Not enough args'
        return 1

    if not cur_block:
        print >>sys.stderr, 'ERROR: No block is active for rebase'
        return 1

    base_name = BASE_PREFIX + cur_block
    tip_name = TIP_PREFIX + cur_block

    if onto.startswith('-'):
        print >>sys.stderr, 'ERROR: Invalid subcommand \'{}\''.format(target)
        return 1

    onto = onto
    if onto in blocks:
        onto = TIP_PREFIX + onto

    try:
        onto_rev = run_git('rev-parse', onto)[0].strip()
    except subprocess.CalledProcessError:
        print >>sys.stderr, 'ERROR: Bad `onto`: \'{}\''.format(onto)
        return 1

    try:
        rebase_args = ['--onto', onto_rev, base_name, tip_name]
        if interactive:
            rebase_args = ['-i'] + rebase_args
        check_error_git('rebase', *rebase_args)

    except subprocess.CalledProcessError as e:
        output_lines = e.output.splitlines()
        for x in output_lines:
            print >>sys.stderr, x

        return 1

    run_git('branch', '-f', base_name, onto_rev)
    return 0

####

def in_rebase(blocks, args, rebase_dir):
    def read_rebase_file_line(rebase_dir, file_name):
        path = os.path.join(rebase_dir, file_name)
        with open(path, 'r') as f:
            line = f.readlines()[0].rstrip()

        if VERBOSE >= 2:
            print >>sys.stderr, '{}: \'{}\''.format(path, line)

        return line

    head_name = read_rebase_file_line(rebase_dir, 'head-name')
    onto = read_rebase_file_line(rebase_dir, 'onto')

    HEAD_NAME_PREFIX = 'refs/heads/' + TIP_PREFIX
    assert head_name.startswith(HEAD_NAME_PREFIX)
    cur_block = head_name[len(HEAD_NAME_PREFIX):]

    if cur_block not in blocks:
        print >>sys.stderr, 'ERROR: No block is active during current rebase'
        return 1

    ####

    while args:
        x = args.pop(0)
        cmd = x
        break
    else:
        print >>sys.stderr, 'ERROR: Not enough args'
        return 1

    if cmd == '--abort':
        run_git('rebase', '--abort')
        return 0

    if cmd.startswith('--cont'):
        try:
            check_error_git('rebase', '--continue')
            # Rebase succeeded.
        except subprocess.CalledProcessError as e:
            for x in e.output.splitlines():
                print >>sys.stderr, x
            return 1

        run_git('branch', '-f', BASE_PREFIX + cur_block, onto)
        return 0

    print >>sys.stderr, 'ERROR: Unrecognized subcommand \'{}\''.format(cmd)
    return 1

####

if __name__ == '__main__':
    exit(main(sys.argv[1:]))
